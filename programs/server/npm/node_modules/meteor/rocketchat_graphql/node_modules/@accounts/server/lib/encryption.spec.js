'use strict';

var _encryption = require('./encryption');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('hashPassword', function () {
  it('hashes password', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var hash;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _encryption.hashPassword)('password');

          case 2:
            hash = _context.sent;

            expect(hash).toBeTruthy();

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});

describe('verifyPassword', function () {
  it('true if password matches', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    var password, hash;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            password = 'password';
            _context2.next = 3;
            return (0, _encryption.hashPassword)(password);

          case 3:
            hash = _context2.sent;
            _context2.t0 = expect;
            _context2.next = 7;
            return (0, _encryption.verifyPassword)(password, hash);

          case 7:
            _context2.t1 = _context2.sent;
            (0, _context2.t0)(_context2.t1).toBe(true);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));
  it('false if password does not match', function () {
    it('true if password matches', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
      var password, wrongPassword, hash;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              password = 'password';
              wrongPassword = 'wrongPassword';
              _context3.next = 4;
              return (0, _encryption.hashPassword)(password);

            case 4:
              hash = _context3.sent;
              _context3.t0 = expect;
              _context3.next = 8;
              return (0, _encryption.verifyPassword)(wrongPassword, hash);

            case 8:
              _context3.t1 = _context3.sent;
              (0, _context3.t0)(_context3.t1).toBe(false);

            case 10:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, undefined);
    })));
  });
});
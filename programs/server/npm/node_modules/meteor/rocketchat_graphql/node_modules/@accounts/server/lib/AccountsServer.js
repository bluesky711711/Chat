'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountsServer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _common = require('@accounts/common');

var _config2 = require('./config');

var _config3 = _interopRequireDefault(_config2);

var _encryption = require('./encryption');

var _tokens = require('./tokens');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AccountsServer = exports.AccountsServer = function () {
  function AccountsServer(options, db) {
    _classCallCheck(this, AccountsServer);

    this.options = options;
    if (!db) {
      throw new _common.AccountsError('A database driver is required');
    }
    this.db = db;
  }
  // eslint-disable-next-line max-len


  _createClass(AccountsServer, [{
    key: 'loginWithPassword',
    value: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(user, password, ip, userAgent) {
        var foundUser, sessionId, _createTokens, accessToken, refreshToken;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!user || !password)) {
                  _context.next = 2;
                  break;
                }

                throw new _common.AccountsError('Unrecognized options for login request', user, 400);

              case 2:
                if (!(!(0, _lodash.isString)(user) && !(0, _lodash.isPlainObject)(user) || !(0, _lodash.isString)(password))) {
                  _context.next = 4;
                  break;
                }

                throw new _common.AccountsError('Match failed', user, 400);

              case 4:
                foundUser = void 0;

                if (!this.options.passwordAuthenticator) {
                  _context.next = 17;
                  break;
                }

                _context.prev = 6;
                _context.next = 9;
                return this._externalPasswordAuthenticator(this.options.passwordAuthenticator, user, password);

              case 9:
                foundUser = _context.sent;
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context['catch'](6);
                throw new _common.AccountsError(_context.t0, user, 403);

              case 15:
                _context.next = 20;
                break;

              case 17:
                _context.next = 19;
                return this._defaultPasswordAuthenticator(user, password);

              case 19:
                foundUser = _context.sent;

              case 20:
                if (foundUser) {
                  _context.next = 22;
                  break;
                }

                throw new _common.AccountsError('User not found', user, 403);

              case 22:
                _context.next = 24;
                return this.db.createSession(foundUser.id, ip, userAgent);

              case 24:
                sessionId = _context.sent;
                _createTokens = this.createTokens(sessionId), accessToken = _createTokens.accessToken, refreshToken = _createTokens.refreshToken;
                return _context.abrupt('return', {
                  sessionId: sessionId,
                  user: foundUser,
                  tokens: {
                    refreshToken: refreshToken,
                    accessToken: accessToken
                  }
                });

              case 27:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[6, 12]]);
      }));

      function loginWithPassword(_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return loginWithPassword;
    }()

    // eslint-disable-next-line max-len

  }, {
    key: '_externalPasswordAuthenticator',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(authFn, user, password) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', authFn(user, password));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _externalPasswordAuthenticator(_x5, _x6, _x7) {
        return _ref2.apply(this, arguments);
      }

      return _externalPasswordAuthenticator;
    }()
  }, {
    key: '_defaultPasswordAuthenticator',
    value: function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(user, password) {
        var _ref4, username, email, id, foundUser, hash, isPasswordValid;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref4 = (0, _lodash.isString)(user) ? (0, _common.toUsernameAndEmail)({ user: user }) : (0, _common.toUsernameAndEmail)(_extends({}, user)), username = _ref4.username, email = _ref4.email, id = _ref4.id;
                foundUser = void 0;

                if (!id) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 5;
                return this.db.findUserById(id);

              case 5:
                foundUser = _context3.sent;
                _context3.next = 18;
                break;

              case 8:
                if (!username) {
                  _context3.next = 14;
                  break;
                }

                _context3.next = 11;
                return this.db.findUserByUsername(username);

              case 11:
                foundUser = _context3.sent;
                _context3.next = 18;
                break;

              case 14:
                if (!email) {
                  _context3.next = 18;
                  break;
                }

                _context3.next = 17;
                return this.db.findUserByEmail(email);

              case 17:
                foundUser = _context3.sent;

              case 18:
                if (foundUser) {
                  _context3.next = 20;
                  break;
                }

                throw new _common.AccountsError('User not found', user, 403);

              case 20:
                _context3.next = 22;
                return this.db.findPasswordHash(foundUser.id);

              case 22:
                hash = _context3.sent;

                if (hash) {
                  _context3.next = 25;
                  break;
                }

                throw new _common.AccountsError('User has no password set', user, 403);

              case 25:
                _context3.next = 27;
                return (0, _encryption.verifyPassword)(password, hash);

              case 27:
                isPasswordValid = _context3.sent;

                if (isPasswordValid) {
                  _context3.next = 30;
                  break;
                }

                throw new _common.AccountsError('Incorrect password', user, 403);

              case 30:
                return _context3.abrupt('return', foundUser);

              case 31:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _defaultPasswordAuthenticator(_x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return _defaultPasswordAuthenticator;
    }()
  }, {
    key: 'createUser',
    value: function () {
      var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(user) {
        var userId;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(!_common.validators.validateUsername(user.username) && !_common.validators.validateEmail(user.email))) {
                  _context4.next = 2;
                  break;
                }

                throw new _common.AccountsError('Username or Email is required', {
                  username: user && user.username,
                  email: user && user.email
                });

              case 2:
                _context4.t0 = user.username;

                if (!_context4.t0) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 6;
                return this.db.findUserByUsername(user.username);

              case 6:
                _context4.t0 = _context4.sent;

              case 7:
                if (!_context4.t0) {
                  _context4.next = 9;
                  break;
                }

                throw new _common.AccountsError('Username already exists', { username: user.username });

              case 9:
                _context4.t1 = user.email;

                if (!_context4.t1) {
                  _context4.next = 14;
                  break;
                }

                _context4.next = 13;
                return this.db.findUserByEmail(user.email);

              case 13:
                _context4.t1 = _context4.sent;

              case 14:
                if (!_context4.t1) {
                  _context4.next = 16;
                  break;
                }

                throw new _common.AccountsError('Email already exists', { email: user.email });

              case 16:
                _context4.next = 18;
                return this.db.createUser({
                  username: user.username,
                  email: user.email && user.email.toLowerCase(),
                  password: user.password,
                  profile: user.profile
                });

              case 18:
                userId = _context4.sent;
                return _context4.abrupt('return', userId);

              case 20:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function createUser(_x10) {
        return _ref5.apply(this, arguments);
      }

      return createUser;
    }()
    // eslint-disable-next-line max-len

  }, {
    key: 'refreshTokens',
    value: function () {
      var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(accessToken, refreshToken, ip, userAgent) {
        var sessionId, decodedAccessToken, session, user, tokens;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(!(0, _lodash.isString)(accessToken) || !(0, _lodash.isString)(refreshToken))) {
                  _context5.next = 2;
                  break;
                }

                throw new _common.AccountsError('An accessToken and refreshToken are required');

              case 2:
                sessionId = void 0;
                _context5.prev = 3;

                _jsonwebtoken2.default.verify(refreshToken, this.options.tokenSecret);
                decodedAccessToken = _jsonwebtoken2.default.verify(accessToken, this.options.tokenSecret, {
                  ignoreExpiration: true
                });

                sessionId = decodedAccessToken.data.sessionId;
                _context5.next = 12;
                break;

              case 9:
                _context5.prev = 9;
                _context5.t0 = _context5['catch'](3);
                throw new _common.AccountsError('Tokens are not valid');

              case 12:
                _context5.next = 14;
                return this.db.findSessionById(sessionId);

              case 14:
                session = _context5.sent;

                if (session) {
                  _context5.next = 17;
                  break;
                }

                throw new _common.AccountsError('Session not found');

              case 17:
                if (!session.valid) {
                  _context5.next = 29;
                  break;
                }

                _context5.next = 20;
                return this.db.findUserById(session.userId);

              case 20:
                user = _context5.sent;

                if (user) {
                  _context5.next = 23;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: session.userId });

              case 23:
                tokens = this.createTokens(sessionId);
                _context5.next = 26;
                return this.db.updateSession(sessionId, ip, userAgent);

              case 26:
                return _context5.abrupt('return', {
                  sessionId: sessionId,
                  user: user,
                  tokens: tokens
                });

              case 29:
                throw new _common.AccountsError('Session is no longer valid', { id: session.userId });

              case 30:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[3, 9]]);
      }));

      function refreshTokens(_x11, _x12, _x13, _x14) {
        return _ref6.apply(this, arguments);
      }

      return refreshTokens;
    }()
  }, {
    key: 'createTokens',
    value: function createTokens(sessionId) {
      var _options = this.options,
          tokenSecret = _options.tokenSecret,
          tokenConfigs = _options.tokenConfigs;

      var accessToken = (0, _tokens.generateAccessToken)({
        data: {
          sessionId: sessionId
        },
        secret: tokenSecret,
        config: tokenConfigs.accessToken
      });
      var refreshToken = (0, _tokens.generateRefreshToken)({
        secret: tokenSecret,
        config: tokenConfigs.refreshToken
      });
      return { accessToken: accessToken, refreshToken: refreshToken };
    }
  }, {
    key: 'logout',
    value: function () {
      var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(accessToken) {
        var session, user;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.findSessionByAccessToken(accessToken);

              case 2:
                session = _context6.sent;

                if (!session.valid) {
                  _context6.next = 13;
                  break;
                }

                _context6.next = 6;
                return this.db.findUserById(session.userId);

              case 6:
                user = _context6.sent;

                if (user) {
                  _context6.next = 9;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: session.userId });

              case 9:
                _context6.next = 11;
                return this.db.invalidateSession(session.sessionId);

              case 11:
                _context6.next = 14;
                break;

              case 13:
                throw new _common.AccountsError('Session is no longer valid', { id: session.userId });

              case 14:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function logout(_x15) {
        return _ref7.apply(this, arguments);
      }

      return logout;
    }()
  }, {
    key: 'resumeSession',
    value: function () {
      var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(accessToken) {
        var session, user;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.findSessionByAccessToken(accessToken);

              case 2:
                session = _context7.sent;

                if (!session.valid) {
                  _context7.next = 19;
                  break;
                }

                _context7.next = 6;
                return this.db.findUserById(session.userId);

              case 6:
                user = _context7.sent;

                if (user) {
                  _context7.next = 9;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: session.userId });

              case 9:
                if (!this.options.resumeSessionValidator) {
                  _context7.next = 18;
                  break;
                }

                _context7.prev = 10;
                _context7.next = 13;
                return this.options.resumeSessionValidator(user, session);

              case 13:
                _context7.next = 18;
                break;

              case 15:
                _context7.prev = 15;
                _context7.t0 = _context7['catch'](10);
                throw new _common.AccountsError(_context7.t0, { id: session.userId }, 403);

              case 18:
                return _context7.abrupt('return', user);

              case 19:
                return _context7.abrupt('return', null);

              case 20:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this, [[10, 15]]);
      }));

      function resumeSession(_x16) {
        return _ref8.apply(this, arguments);
      }

      return resumeSession;
    }()
  }, {
    key: 'findSessionByAccessToken',
    value: function () {
      var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(accessToken) {
        var sessionId, decodedAccessToken, session;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if ((0, _lodash.isString)(accessToken)) {
                  _context8.next = 2;
                  break;
                }

                throw new _common.AccountsError('An accessToken is required');

              case 2:
                sessionId = void 0;
                _context8.prev = 3;
                decodedAccessToken = _jsonwebtoken2.default.verify(accessToken, this.options.tokenSecret);

                sessionId = decodedAccessToken.data.sessionId;
                _context8.next = 11;
                break;

              case 8:
                _context8.prev = 8;
                _context8.t0 = _context8['catch'](3);
                throw new _common.AccountsError('Tokens are not valid');

              case 11:
                _context8.next = 13;
                return this.db.findSessionById(sessionId);

              case 13:
                session = _context8.sent;

                if (session) {
                  _context8.next = 16;
                  break;
                }

                throw new _common.AccountsError('Session not found');

              case 16:
                return _context8.abrupt('return', session);

              case 17:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this, [[3, 8]]);
      }));

      function findSessionByAccessToken(_x17) {
        return _ref9.apply(this, arguments);
      }

      return findSessionByAccessToken;
    }()
  }, {
    key: 'findUserByEmail',
    value: function findUserByEmail(email) {
      return this.db.findUserByEmail(email);
    }
  }, {
    key: 'findUserByUsername',
    value: function findUserByUsername(username) {
      return this.db.findUserByUsername(username);
    }
  }, {
    key: 'findUserById',
    value: function findUserById(userId) {
      return this.db.findUserById(userId);
    }
  }, {
    key: 'addEmail',
    value: function addEmail(userId, newEmail, verified) {
      return this.db.addEmail(userId, newEmail, verified);
    }
  }, {
    key: 'removeEmail',
    value: function removeEmail(userId, email) {
      return this.db.removeEmail(userId, email);
    }
  }, {
    key: 'verifyEmail',
    value: function () {
      var _ref10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(token) {
        var user, tokenRecord, emailRecord;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.db.findUserByEmailVerificationToken();

              case 2:
                user = _context9.sent;

                if (user) {
                  _context9.next = 5;
                  break;
                }

                throw new _common.AccountsError('Verify email link expired');

              case 5:
                tokenRecord = (0, _lodash.find)(user.services.email.verificationTokens, function (t) {
                  return t.token === token;
                });

                if (tokenRecord) {
                  _context9.next = 8;
                  break;
                }

                throw new _common.AccountsError('Verify email link expired');

              case 8:
                emailRecord = (0, _lodash.find)(user.emails, function (e) {
                  return e.address === tokenRecord.address;
                });

                if (emailRecord) {
                  _context9.next = 11;
                  break;
                }

                throw new _common.AccountsError('Verify email link is for unknown address');

              case 11:
                _context9.next = 13;
                return this.db.verifyEmail(user.id, emailRecord);

              case 13:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function verifyEmail(_x18) {
        return _ref10.apply(this, arguments);
      }

      return verifyEmail;
    }()
  }, {
    key: 'setPassword',
    value: function setPassword(userId, newPassword) {
      return this.db.setPasssword(userId, newPassword);
    }
  }, {
    key: 'setProfile',
    value: function () {
      var _ref11 = _asyncToGenerator(regeneratorRuntime.mark(function _callee10(userId, profile) {
        var user;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.db.findUserById(userId);

              case 2:
                user = _context10.sent;

                if (user) {
                  _context10.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: userId });

              case 5:
                _context10.next = 7;
                return this.db.setProfile(userId, profile);

              case 7:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function setProfile(_x19, _x20) {
        return _ref11.apply(this, arguments);
      }

      return setProfile;
    }()
  }, {
    key: 'updateProfile',
    value: function () {
      var _ref12 = _asyncToGenerator(regeneratorRuntime.mark(function _callee11(userId, profile) {
        var user, res;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.db.findUserById(userId);

              case 2:
                user = _context11.sent;

                if (user) {
                  _context11.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: userId });

              case 5:
                _context11.next = 7;
                return this.db.setProfile(userId, _extends({}, user.profile, profile));

              case 7:
                res = _context11.sent;
                return _context11.abrupt('return', res);

              case 9:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function updateProfile(_x21, _x22) {
        return _ref12.apply(this, arguments);
      }

      return updateProfile;
    }()
  }]);

  return AccountsServer;
}();

var Accounts = {
  instance: AccountsServer,
  config: function config(options, db) {
    this.instance = new AccountsServer(_extends({}, _config3.default, options), db);
  },
  options: function options() {
    return this.instance.options;
  },
  loginWithPassword: function loginWithPassword(user, password, ip, userAgent) {
    return this.instance.loginWithPassword(user, password, ip, userAgent);
  },
  createUser: function createUser(user) {
    return this.instance.createUser(user);
  },
  findUserByEmail: function findUserByEmail(email, onlyId) {
    return this.instance.findUserByEmail(email, onlyId);
  },
  findUserByUsername: function findUserByUsername(username, onlyId) {
    return this.instance.findUserByUsername(username, onlyId);
  },
  findUserById: function findUserById(userId) {
    return this.instance.findUserById(userId);
  },
  addEmail: function addEmail(userId, newEmail, verified) {
    return this.instance.addEmail(userId, newEmail, verified);
  },
  removeEmail: function removeEmail(userId, newEmail) {
    return this.instance.removeEmail(userId, newEmail);
  },
  verifyEmail: function verifyEmail(token) {
    return this.instance.verifyEmail(token);
  },
  setPassword: function setPassword(userId, newPassword) {
    return this.instance.setPassword(userId, newPassword);
  },
  refreshTokens: function refreshTokens(accessToken, refreshToken, ip, userAgent) {
    return this.instance.refreshTokens(accessToken, refreshToken, ip, userAgent);
  },
  logout: function logout(accessToken) {
    return this.instance.logout(accessToken);
  },
  resumeSession: function resumeSession(accessToken) {
    return this.instance.resumeSession(accessToken);
  },
  setProfile: function setProfile(userId, profile) {
    return this.instance.setProfile(userId, profile);
  },
  updateProfile: function updateProfile(userId, profile) {
    return this.instance.updateProfile(userId, profile);
  }
};

exports.default = Accounts;